/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package pt.rics.uninova.demo.gui;

import java.util.Random;
import java.util.UUID;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.eclipse.paho.mqttv5.common.MqttException;
import org.eclipse.paho.sample.mqttclient.mqttv3.MqttV3Client;
import org.eclipse.paho.sample.mqttclient.mqttv5.MqttV5Client;
import pt.rics.uninova.demo.data.model.SensorRecord;

/**
 *
 * @author joao
 */
public class PublisherGUIFrame extends javax.swing.JFrame {
    
    MqttV3Client v3Executor;
    MqttV5Client v5Executor;
    boolean MqttV5 = false;
    
    String SensorAID;
    String SensorBID;
    String SensorCID;
    
    String SensorADesc = "Sensor Type A";
    String SensorBDesc = "Sensor Type B";
    String SensorCDesc = "Sensor Type C";
    
    int SensorAValue;
    int SensorBValue;
    int SensorCValue;
    
    /**
     * Creates new form PublisherGUIFrame
     * @param v3Executor
     * @param MqttV5
     */
    public PublisherGUIFrame(MqttV3Client v3Executor, boolean MqttV5) {
        initComponents();
        this.v3Executor = v3Executor;
        this.MqttV5 = MqttV5;
        this.TitleLabel.setText("Publisher MQTTv3");
        randomize("SensorA");
        randomize("SensorB");
        randomize("SensorC");
        updateLabels();
    }
    
    public PublisherGUIFrame(MqttV5Client v5Executor, boolean MqttV5) {
        initComponents();
        this.v5Executor = v5Executor;
        this.MqttV5 = MqttV5;
        this.TitleLabel.setText("Publisher MQTTv5");
        randomize("SensorA");
        randomize("SensorB");
        randomize("SensorC");
        updateLabels();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        TitleLabel = new javax.swing.JLabel();
        SensorAData = new javax.swing.JLabel();
        SensorBData = new javax.swing.JLabel();
        SensorCData = new javax.swing.JLabel();
        RandomizeA = new javax.swing.JButton();
        RandomizeB = new javax.swing.JButton();
        RandomizeC = new javax.swing.JButton();
        PublishA = new javax.swing.JButton();
        PublishB = new javax.swing.JButton();
        PublishC = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(1200, 400));

        TitleLabel.setFont(new java.awt.Font("Ubuntu", 1, 24)); // NOI18N
        TitleLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        TitleLabel.setText("Publisher");

        SensorAData.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        SensorAData.setText("jLabel2");

        SensorBData.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        SensorBData.setText("jLabel3");

        SensorCData.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        SensorCData.setText("jLabel4");

        RandomizeA.setText("Randomize");
        RandomizeA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RandomizeAActionPerformed(evt);
            }
        });

        RandomizeB.setText("Randomize");
        RandomizeB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RandomizeBActionPerformed(evt);
            }
        });

        RandomizeC.setText("Randomize");
        RandomizeC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RandomizeCActionPerformed(evt);
            }
        });

        PublishA.setText("Publish A");
        PublishA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PublishAActionPerformed(evt);
            }
        });

        PublishB.setText("Publish B");
        PublishB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PublishBActionPerformed(evt);
            }
        });

        PublishC.setText("Publish C");
        PublishC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PublishCActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(69, 69, 69)
                .addComponent(SensorAData, javax.swing.GroupLayout.DEFAULT_SIZE, 66, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 112, Short.MAX_VALUE)
                .addComponent(SensorBData, javax.swing.GroupLayout.DEFAULT_SIZE, 66, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 113, Short.MAX_VALUE)
                .addComponent(SensorCData, javax.swing.GroupLayout.DEFAULT_SIZE, 66, Short.MAX_VALUE)
                .addGap(69, 69, 69))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(PublishA, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(RandomizeA, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(57, 57, 57)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(RandomizeB, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(PublishB, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(57, 57, 57)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(RandomizeC, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(PublishC, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(40, 40, 40))
            .addGroup(layout.createSequentialGroup()
                .addGap(219, 219, 219)
                .addComponent(TitleLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addGap(220, 220, 220))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(TitleLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(SensorCData, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(SensorAData, javax.swing.GroupLayout.DEFAULT_SIZE, 120, Short.MAX_VALUE)
                    .addComponent(SensorBData, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(RandomizeA, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(RandomizeB, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(RandomizeC, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(PublishA)
                    .addComponent(PublishB, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(PublishC, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(43, 43, 43))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void RandomizeAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RandomizeAActionPerformed
        randomize("SensorA");
        updateLabels();
    }//GEN-LAST:event_RandomizeAActionPerformed

    private void RandomizeBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RandomizeBActionPerformed
        randomize("SensorB");
        updateLabels();
    }//GEN-LAST:event_RandomizeBActionPerformed

    private void RandomizeCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RandomizeCActionPerformed
        randomize("SensorC");
        updateLabels();
    }//GEN-LAST:event_RandomizeCActionPerformed

    private void PublishAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PublishAActionPerformed
        SensorRecord sensorA = new SensorRecord(this.SensorAID, this.SensorADesc,
                this.SensorAValue);
        try {
            if(this.MqttV5){
                    this.v5Executor.publish("SensorA", 0, sensorA.toString(), false);
            } else this.v3Executor.publish("SensorA", 0, sensorA.toString(), false);
        }catch (org.eclipse.paho.client.mqttv3.MqttException | MqttException ex) {
                Logger.getLogger(PublisherGUIFrame.class.getName()).log(Level.SEVERE, null, ex);
         }
    }//GEN-LAST:event_PublishAActionPerformed

    private void PublishBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PublishBActionPerformed
        SensorRecord sensorB = new SensorRecord(this.SensorBID, this.SensorBDesc,
                this.SensorBValue);
        try {
            if(this.MqttV5){
                    this.v5Executor.publish("SensorB", 0, sensorB.toString(), false);
            } else this.v3Executor.publish("SensorB", 0, sensorB.toString(), false);
        }catch (org.eclipse.paho.client.mqttv3.MqttException | MqttException ex) {
                Logger.getLogger(PublisherGUIFrame.class.getName()).log(Level.SEVERE, null, ex);
         }
    }//GEN-LAST:event_PublishBActionPerformed

    private void PublishCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PublishCActionPerformed
        SensorRecord sensorC = new SensorRecord(this.SensorCID, this.SensorCDesc,
                this.SensorCValue);
        try {
            if(this.MqttV5){
                    this.v5Executor.publish("SensorC", 0, sensorC.toString(), false);
            } else this.v3Executor.publish("SensorC", 0, sensorC.toString(), false);
        }catch (org.eclipse.paho.client.mqttv3.MqttException | MqttException ex) {
                Logger.getLogger(PublisherGUIFrame.class.getName()).log(Level.SEVERE, null, ex);
         }
    }//GEN-LAST:event_PublishCActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PublisherGUIFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PublisherGUIFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PublisherGUIFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PublisherGUIFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton PublishA;
    private javax.swing.JButton PublishB;
    private javax.swing.JButton PublishC;
    private javax.swing.JButton RandomizeA;
    private javax.swing.JButton RandomizeB;
    private javax.swing.JButton RandomizeC;
    private javax.swing.JLabel SensorAData;
    private javax.swing.JLabel SensorBData;
    private javax.swing.JLabel SensorCData;
    private javax.swing.JLabel TitleLabel;
    // End of variables declaration//GEN-END:variables
    
    private void randomize(String sensor){
        if (sensor.equalsIgnoreCase("SensorA")){
            UUID uuid = UUID.randomUUID();
            this.SensorAID = "Sensor_" + uuid;
            Random rand = new Random();
            this.SensorAValue = rand.nextInt(101);
        }
        if (sensor.equalsIgnoreCase("SensorB")){
            UUID uuid = UUID.randomUUID();
            this.SensorBID = "Sensor_" + uuid;
            Random rand = new Random();
            this.SensorBValue = rand.nextInt(101);
        }
        if (sensor.equalsIgnoreCase("SensorC")){
            UUID uuid = UUID.randomUUID();
            this.SensorCID = "Sensor_" + uuid;
            Random rand = new Random();
            this.SensorCValue = rand.nextInt(101);
        }
    }
    
    private void updateLabels(){
        this.SensorAData.setText("<html>Sensor ID: " + this.SensorAID + "<br>Sensor Description: " + 
            this.SensorADesc + "<br>Sensor Value: " + Integer.toString(this.SensorAValue) + "ºC </html>");
        this.SensorBData.setText("<html>Sensor ID: " + this.SensorBID + "<br>Sensor Description: " + 
            this.SensorBDesc + "<br>Sensor Value: " + Integer.toString(this.SensorBValue) + "ºC </html>");
        this.SensorCData.setText("<html>Sensor ID: " + this.SensorCID + "<br>Sensor Description: " + 
            this.SensorCDesc + "<br>Sensor Value: " + Integer.toString(this.SensorCValue) + "ºC </html>");
    }
}
